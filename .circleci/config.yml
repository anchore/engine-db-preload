# CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/configuration-reference/ for more details
#
# The following environment variables must be set in the circleci project UI
# - $IMAGE_NAME -> name of image to push to dockerhub
# - $DOCKER_USER -> dockerhub user with permissions to repo
# - $DOCKER_PASS -> password for dockerhub user
#
# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/
#
# Define YAML anchors
.attach_workspace: &attach_workspace
  attach_workspace:
      at: /home/circleci/workspace/

.install_dependencies: &install_dependencies
  run:
    name: install dependencies
    command: |
      pip install --upgrade pip
      pip install --upgrade docker-compose

# Start circleci configuration
version: 2.1
orbs:
  anchore: anchore/anchore-engine@1.0.0
commands:
  build_image:
    description: Build the container image
    steps:
      - run:
          name: Build image
          command: |
            cd .circleci
            python /home/circleci/build/scripts/feed_sync_wait.py 180 10
            docker tag "${IMAGE_NAME}:latest" "${IMAGE_NAME}:ci"

  dockerhub_push:
    description: Push image to dockerhub
    parameters:
      git_branch:
        type: string
    steps:
      - run:
          name: Push image to Dockerhub
          command: |
            export ANCHORE_VERSION=$(cat /home/circleci/workspace/<< parameters.git_branch >>/anchore-version.txt)
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            echo ${IMAGE_NAME}:${ANCHORE_VERSION}
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              docker tag "${IMAGE_NAME}:ci" "${IMAGE_NAME}:${ANCHORE_VERSION}"
              docker push "${IMAGE_NAME}:${ANCHORE_VERSION}"
              if [ << parameters.git_branch >> == "master" ]; then
                docker tag "${IMAGE_NAME}:ci" "${IMAGE_NAME}:latest"
                docker push "${IMAGE_NAME}:latest"
              fi
            else
              docker tag "${IMAGE_NAME}:ci" "anchore/private_testing:engine-db-preload-${CIRCLE_BRANCH}-${ANCHORE_VERSION}"
              docker push "anchore/private_testing:engine-db-preload-${CIRCLE_BRANCH}-${ANCHORE_VERSION}"
            fi

  get_release_tag:
    description: Gets the latest release tag from GitHub for the specified branch
    parameters:
      git_branch:
        type: string
    steps:
      - run:
          name: Get anchore-engine release tag
          command: |
            git clone git@github.com:anchore/anchore-engine.git
            cd anchore-engine && git checkout << parameters.git_branch >>
            mkdir -p /home/circleci/workspace/<< parameters.git_branch >>
            git describe --tag --abbrev=0 --exclude "*rc*" > /home/circleci/workspace/<< parameters.git_branch >>/anchore-version.txt

  load_image:
    description: Load docker image from tarball
    parameters:
      git_branch:
        type: string
    steps:
      - run:
          name: Load Docker image
          command: docker load -i "/home/circleci/workspace/<< parameters.git_branch >>/caches/${CIRCLE_PROJECT_REPONAME}-ci.tar"

  run_tests:
    description: Run aetests from anchore-engine repo
    parameters:
      git_branch:
        type: string
    steps:
      - anchore/install_tools
      - run:
          name: Run aetest.py
          command: |
            docker run -td --net=host --name anchore-cli docker.io/anchore/engine-cli:latest tail -f /dev/null
            anchore_ci_tools --wait
            docker exec anchore-cli anchore-cli --u admin --p foobar system status
            git clone git@github.com:anchore/anchore-engine.git
            cd anchore-engine && git checkout << parameters.git_branch >>
            cd scripts/tests
            python aetest.py docker.io/alpine:latest anchore-cli
            python aefailtest.py docker.io/alpine:latest anchore-cli

  save_image:
    description: Save tarball of image
    parameters:
      git_branch:
        type: string
    steps:
      - run:
          name: Save docker image to tarball
          command: |
            rm -rf /home/circleci/workspace/<< parameters.git_branch >>/caches/
            mkdir /home/circleci/workspace/<< parameters.git_branch >>/caches/ -p
            docker save -o "/home/circleci/workspace/<< parameters.git_branch >>/caches/${CIRCLE_PROJECT_REPONAME}-ci.tar" "${IMAGE_NAME}:ci"

  setup_anchore_engine:
    description: |
      Use docker compose to stand up anchore engine using the
      version specified. Also appends feeds configuration for db preload.
    parameters:
      git_branch:
        type: string
    steps:
      - run:
          name: Setup anchore engine
          command: |
            export ANCHORE_VERSION=$(cat /home/circleci/workspace/<< parameters.git_branch >>/anchore-version.txt)
            echo $ANCHORE_VERSION
            cd .circleci
            sed -i "s/ANCHORE_VERSION/${ANCHORE_VERSION}/" docker-compose.yaml
            mkdir config db
            curl -o config/config.yaml "https://raw.githubusercontent.com/anchore/anchore-engine/${ANCHORE_VERSION}/scripts/docker-compose/config.yaml"
            cat \<< EOF \>> config/config.yaml

            feeds:
              sync_enabled: True
              selective_sync:
                enabled: True
                feeds:
                  packages: False
                  vulnerabilities: True
                  nvd: True
            EOF
            docker-compose up -d
            docker logs anchore-engine
jobs:
  v2_build:
    machine: true
    working_directory: /home/circleci/build
    steps:
      - checkout
      - <<: *install_dependencies
      - get_release_tag:
          git_branch: "0.2"
      - setup_anchore_engine:
          git_branch: "0.2"
      - build_image
      - save_image:
          git_branch: "0.2"
      - persist_to_workspace:
          root: /home/circleci/workspace/
          paths:
            - 0.2/*

  v2_tests:
    machine: true
    working_directory: /home/circleci/build
    steps:
      - checkout
      - <<: *attach_workspace
      - load_image:
          git_branch: "0.2"
      - run:
          name: Setup docker-compose to use newly built image
          command: |
            sed -i "s|postgres:9|${IMAGE_NAME}:ci|g" /home/circleci/build/.circleci/docker-compose.yaml
      - setup_anchore_engine:
          git_branch: "0.2"
      - run_tests:
          git_branch: "0.2"

  v2_push:
    docker:
      - image: docker:stable
    steps:
      - setup_remote_docker
      - <<: *attach_workspace
      - load_image:
          git_branch: "0.2"
      - dockerhub_push:
          git_branch: "0.2"

  v3_build:
    machine: true
    working_directory: /home/circleci/build
    steps:
      - checkout
      - <<: *install_dependencies
      - get_release_tag:
          git_branch: "master"
      - setup_anchore_engine:
          git_branch: "master"
      - build_image
      - save_image:
          git_branch: "master"
      - persist_to_workspace:
          root: /home/circleci/workspace/
          paths:
            - master/*

  v3_tests:
    machine: true
    working_directory: /home/circleci/build
    steps:
      - checkout
      - <<: *attach_workspace
      - load_image:
          git_branch: "master"
      - run:
          name: Setup docker-compose to use newly built image
          command: |
            sed -i "s|postgres:9|${IMAGE_NAME}:ci|g" /home/circleci/build/.circleci/docker-compose.yaml
      - setup_anchore_engine:
          git_branch: "master"
      - run_tests:
          git_branch: "master"

  v3_push:
    docker:
      - image: docker:stable
    steps:
      - setup_remote_docker
      - <<: *attach_workspace
      - load_image:
          git_branch: "master"
      - dockerhub_push:
          git_branch: "master"

workflows:
  default_workflow:
    jobs:
      - v2_build
      - v2_tests:
          requires:
            - v2_build
      - v2_push:
          requires:
            - v2_tests
      - v3_build
      - v3_tests:
          requires:
            - v3_build
      - v3_push:
          requires:
            - v3_tests
  nightly_build:
    triggers:
      - schedule:
          cron: "0 10 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - v2_build
      - v2_tests:
          requires:
            - v2_build
      - v2_push:
          requires:
            - v2_tests
      - v3_build
      - v3_tests:
          requires:
            - v3_build
      - v3_push:
          requires:
            - v3_tests
